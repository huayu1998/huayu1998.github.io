{
  "hash": "b76bc5892d6a70b29e14f553dc4ae1dd",
  "result": {
    "markdown": "---\ntitle: \"Linear & Nonlinear Regression\"\nauthor: \"Huayu Liang\"\ndate: \"now\"\ncategories: [ML, visualization, linear regressson]\nimage: \"linear.png\"\n---\n\nImage from the source: [Analytics Yogi: Linear Regression Python Examples](https://vitalflux.com/linear-regression-explained-python-sklearn-examples/)\n\n# Exploring Regression with Python\n\nRegression is a vital concept in machine learning that helps us model relationships between variables. In this blog post, we'll explore both linear and nonlinear regression, dive into the mathematical formulas, provide explanations, visualize the results, and work with a synthetic dataset.\n\n## What is Linear Regression?\n\nLinear regression is a straightforward approach for modeling the relationship between a dependent variable $(Y)$ and one or more independent variables $(X)$.\n\n### Formula\n\nThe formula for simple linear regression is:\n\n$$\nY = \\beta_0 + \\beta_1 X\n$$\n\nwhere:\n\n-   $Y$ is the dependent variable.\n\n-   $X$ is the independent variable.\n\n-   $\\beta_0$​ is the intercept.\n\n-   $\\beta_1$​ is the slope.\n\n### Python Implementation\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Generate 'random' data\nnp.random.seed(0)\nX = 2.5 * np.random.randn(100) + 1.5   # Array of 100 values with mean = 1.5, stddev = 2.5\nres = 0.5 * np.random.randn(100)       # Generate 100 residual terms\ny = 2 + 0.3 * X + res                  # Actual values of Y\n\n# Create pandas dataframe to store our X and y values\ndf = pd.DataFrame(\n    {'X': X,\n     'y': y}\n)\n\n# Show the first five rows of our dataframe\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>X</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.910131</td>\n      <td>4.714615</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.500393</td>\n      <td>2.076238</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.946845</td>\n      <td>2.548811</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.102233</td>\n      <td>4.615368</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6.168895</td>\n      <td>3.264107</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Calculate the mean of X and y\nxmean = np.mean(X)\nymean = np.mean(y)\n\n# Calculate the terms needed for the numerator and denominator of beta\ndf['xycov'] = (df['X'] - xmean) * (df['y'] - ymean)\ndf['xvar'] = (df['X'] - xmean)**2\n\n# Calculate beta and alpha\nbeta = df['xycov'].sum() / df['xvar'].sum()\nalpha = ymean - (beta * xmean)\nprint(f'alpha = {alpha}')\nprint(f'beta = {beta}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nalpha = 2.0031670124623426\nbeta = 0.3229396867092763\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nypred = alpha + beta * X\n\n# Plot regression against actual data\nplt.figure(figsize=(12, 6))\nplt.plot(X, ypred)     # regression line\nplt.plot(X, y, 'ro')   # scatter plot showing actual data\nplt.title('Actual vs Predicted')\nplt.xlabel('X')\nplt.ylabel('y')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=948 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Import and display first five rows of advertising dataset\nadvert = pd.read_csv('advertising.csv')\nadvert.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>TV</th>\n      <th>Radio</th>\n      <th>Newspaper</th>\n      <th>Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>230.1</td>\n      <td>37.8</td>\n      <td>69.2</td>\n      <td>22.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>44.5</td>\n      <td>39.3</td>\n      <td>45.1</td>\n      <td>10.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>17.2</td>\n      <td>45.9</td>\n      <td>69.3</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>151.5</td>\n      <td>41.3</td>\n      <td>58.5</td>\n      <td>16.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>180.8</td>\n      <td>10.8</td>\n      <td>58.4</td>\n      <td>17.9</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport statsmodels.formula.api as smf\n\n# Initialise and fit linear regression model using `statsmodels`\nmodel = smf.ols('Sales ~ TV', data=advert)\nmodel = model.fit()\n\n\n# Predict values\nsales_pred = model.predict()\n\n# Plot regression against actual data\nplt.figure(figsize=(12, 6))\nplt.plot(advert['TV'], advert['Sales'], 'o')           # scatter plot showing actual data\nplt.plot(advert['TV'], sales_pred, 'r', linewidth=2)   # regression line\nplt.xlabel('TV Advertising Costs')\nplt.ylabel('Sales')\nplt.title('TV vs Sales')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=957 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnew_X = 400\nmodel.predict({\"TV\": new_X})\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0    29.16073\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\n\n# Build linear regression model using TV and Radio as predictors\n# Split data into predictors X and output Y\npredictors = ['TV', 'Radio']\nX = advert[predictors]\ny = advert['Sales']\n\n# Initialise and fit model\nlm = LinearRegression()\nmodel = lm.fit(X, y)\n\nprint(f'alpha = {model.intercept_}')\nprint(f'betas = {model.coef_}')\nmodel.predict(X)\n\nnew_X = [[300, 200]]\nprint(model.predict(new_X))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nalpha = 4.630879464097763\nbetas = [0.05444896 0.10717457]\n[42.40048195]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n  warnings.warn(\n```\n:::\n:::\n\n\n## What is Non-Linear Regression?\n\nNonlinear regression is used when the relationship between variables is not linear and cannot be accurately represented by a straight line.\n\n### Formula\n\nThe formula for a simple nonlinear regression can vary depending on the chosen model. Let's consider a simple polynomial regression:\n\n$$\nY = \\beta_0 + \\beta_1 X + \\beta_2 X^2\n$$\n\nwhere:\n\n-   $Y$ is the dependent variable.\n\n-   $X$ is the independent variable.\n\n-   $\\beta_0$​ is the intercept.\n\n-   $\\beta_1$​ is the coefficient for the linear term.\n\n-   $\\beta_2$​ is the coefficient for the quadratic term.\n\n### Python Implementation\n\n## Conclusion\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}